{"version":3,"sources":["App.jsx","config/index.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","playlists","auth","dupes","selected","_this2","window","location","hash","hashMap","access_token","token_type","expires_in","substring","split","forEach","item","i","fetch","headers","Authorization","concat","then","res","json","firstIndex","indexOf","length","lastIndex","lastIndexOf","setState","href","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","stop","_x2","apply","arguments","_ref2","_callee2","response","items","tracks","_context2","_this3","name","Map","checkForDuplicateItems","console","log","sent","_x3","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","track","value","artist","artists","findArtistName","indexName","album","has","push","old","get","new","set","err","return","artistArray","result","_this4","react_default","createElement","map","index","key","onClick","handleClick","ulName","style","paddingBottom","paddingLeft","replace","encodeURIComponent","credentials","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAgMeA,qBA3Lb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,UAAW,GACXC,KAAM,GACNC,MAAO,GACPC,SAAU,IAPKZ,mFAWC,IAAAa,EAAAV,KAClB,GAAIW,OAAOC,SAASC,KAAM,CACxB,IAAMC,EAAU,CACdC,aAAc,GACdC,WAAY,GACZC,WAAY,GACZb,MAAO,IAETO,OAAOC,SAASC,KAAKK,UAAU,GAAGC,MAAM,KAAKC,QAAQ,SAAAC,GACnD,IAAMC,EAAID,EAAKF,MAAM,KACrBL,EAAQQ,EAAE,IAAMA,EAAE,KAEpBC,MAAM,0CAA2C,CAC/CC,QAAS,CACPC,cAAA,GAAAC,OAAoBZ,EAAO,WAA3B,KAAAY,OAA6CZ,EAAO,iBAGrDa,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACjBF,KAAK,SAAAC,GACJ,IAAME,EAAaF,EAAG,KAASG,QAAQ,qCAAuC,oCAAoCC,OAC5GC,EAAYL,EAAG,KAASM,YAAY,KAC1CxB,EAAKyB,SAAS,CACZ9B,KAAMuB,EAAG,KAASV,UAAUY,EAAYA,GAAcG,EAAYH,IAClExB,UAAWsB,EAAG,MACdrB,KAAI,GAAAmB,OAAKZ,EAAO,WAAZ,KAAAY,OAA8BZ,EAAO,+FAMjCO,qFAChBrB,KAAKmC,SAAS,CAAE3B,MAAO,cACjBe,MAAMF,EAAKe,KAAM,CACrBZ,QAAS,CACPC,cAAiBzB,KAAKI,MAAMG,QAG7BoB,KALG,eAAAU,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAAC,EAAAC,KAKE,SAAAC,EAAMd,GAAN,OAAAW,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SAAanB,EAAIC,QAAjB,wBAAAe,EAAAI,SAAAN,MALF,gBAAAO,GAAA,OAAAZ,EAAAa,MAAAlD,KAAAmD,YAAA,IAMHxB,KANG,eAAAyB,EAAAtD,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAAC,EAAAC,KAME,SAAAY,EAAMC,GAAN,IAAAC,EAAAC,EAAAhD,EAAAsC,EAAAlB,EAAA,OAAAW,EAAAC,EAAAG,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACJY,EAAKvB,SAAS,CAAE1B,SAAU6C,EAASK,OAC7BJ,EAAQD,EAASE,OAAOD,MACxBC,EAAS,IAAII,IACbpD,EAAQ,GACdkD,EAAKG,uBAAuBN,EAAOC,EAAQhD,GAC3CsD,QAAQC,IAAIP,GACZM,QAAQC,IAAIvD,GACRsC,EAAOQ,EAASE,OAAOV,KARvB,UASY,OAATA,EATH,CAAAW,EAAAX,KAAA,gBAAAW,EAAAX,KAAA,GAUgBvB,MAAMuB,EAAM,CAC5BtB,QAAS,CAAEC,cAAiBiC,EAAKtD,MAAMG,QACtCoB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAZjB,QAUID,EAVJ6B,EAAAO,KAaFF,QAAQC,IAAInC,GACRA,GAAOA,EAAI2B,QACbO,QAAQC,IAAI,eACZL,EAAKG,uBAAuBjC,EAAI2B,MAAOC,EAAQhD,IAEjDsD,QAAQC,IAAInC,GACZkB,EAAOlB,EAAIkB,KAnBTW,EAAAX,KAAA,gBAqBAtC,EAAMwB,OAAS,GACjB0B,EAAKvB,SAAS,CAAE3B,UAtBd,yBAAAiD,EAAAT,SAAAK,MANF,gBAAAY,GAAA,OAAAb,EAAAF,MAAAlD,KAAAmD,YAAA,sJAiCeI,EAAOC,EAAQhD,GAAO,IAAA0D,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC3C,QAAAC,EAAAC,EAAmBhB,EAAnBiB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAzB,QAAA4B,MAAAR,GAAA,EAA0B,KAClBS,EADkBL,EAAAM,MACLD,MACbhB,EAAOgB,EAAMhB,KACbkB,EAAkC,IAAzBF,EAAMG,QAAQ9C,OAAe2C,EAAMG,QAAQ,GAAGnB,KAAO3D,KAAK+E,eAAeJ,EAAMG,SACxFE,EAAS,GAAAtD,OAAMiC,EAAN,QAAAjC,OAAiBmD,GAC1BI,EAAQN,EAAMM,MAAMtB,KACrBH,EAAO0B,IAAIF,GAOdxE,EAAM2E,KAAK,CACTC,IAAK,CACHJ,YACArB,KAAMH,EAAO6B,IAAIL,GAAaxB,EAAO6B,IAAIL,GAAWrB,KAAOH,EAAO6B,IAAIL,GACtEH,OAAQrB,EAAO6B,IAAIL,GAAaxB,EAAO6B,IAAIL,GAAWH,OAASrB,EAAO6B,IAAIL,GAC1EC,MAAOzB,EAAO6B,IAAIL,GAAaxB,EAAO6B,IAAIL,GAAWC,MAAQzB,EAAO6B,IAAIL,IAE1EM,IAAK,CACHN,YACArB,OACAsB,QACAJ,YAjBJrB,EAAO+B,IAAIP,EAAW,CACpBC,QACAtB,OACAkB,YAXqC,MAAAW,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAK,EAAAkB,QAAAlB,EAAAkB,SAAA,WAAAtB,EAAA,MAAAC,2CAgC9BsB,GAEb,IADA,IAAIC,EAAS,GACJrE,EAAI,EAAGA,EAAIoE,EAAY1D,OAAQV,IACtCqE,GAAUD,EAAYpE,GAAGqC,KACrBrC,EAAI,EAAIoE,EAAY1D,SAClBV,EAAI,EAAIoE,EAAY1D,OACtB2D,GAAU,KAEVA,GAAU,SAIhB,OAAOA,mCAGA,IAAAC,EAAA5F,KACP,OAAKW,OAAOC,SAASC,KASdgF,EAAArD,EAAAsD,cAAA,WACJ9F,KAAKI,MAAMC,KACZwF,EAAArD,EAAAsD,cAAA,UACG9F,KAAKI,MAAME,UAAUyF,IAAI,SAAC1E,EAAM2E,GAAP,OAAiBH,EAAArD,EAAAsD,cAAA,MAAIG,IAAK,iBAAmB5E,EAAKsC,KAAMuC,QAAS,kBAAMN,EAAKO,YAAY9E,KAAQA,EAAKsC,SAEjIkC,EAAArD,EAAAsD,cAAA,WACC9F,KAAKI,MAAMK,SACVoF,EAAArD,EAAAsD,cAAA,YACED,EAAArD,EAAAsD,cAAA,2BAAmB9F,KAAKI,MAAMK,UACD,IAA5BT,KAAKI,MAAMI,MAAMwB,OAAe,OAC/B6D,EAAArD,EAAAsD,cAAA,WACG9F,KAAKI,MAAMI,MAAMuF,IAAI,SAAC1E,GACrB,IAAMsC,EAAOtC,EAAK+D,IAAIJ,UAAU7D,MAAM,QAChCiF,EAASP,EAAArD,EAAAsD,cAAA,YAAMD,EAAArD,EAAAsD,cAAA,SAAInC,EAAK,IAAf,OAA0BkC,EAAArD,EAAAsD,cAAA,cAASnC,EAAK,KACvD,OAAOkC,EAAArD,EAAAsD,cAAA,QAAMG,IAAK5E,EAAK+D,IAAIJ,WACzBa,EAAArD,EAAAsD,cAAA,YAAOM,GACPP,EAAArD,EAAAsD,cAAA,OAAKO,MAAO,CAAEC,cAAe,QAC3BT,EAAArD,EAAAsD,cAAA,OAAKO,MAAO,CAAEE,YAAa,QAA3B,OACEV,EAAArD,EAAAsD,cAAA,OAAKO,MAAO,CAAEE,YAAa,QACzBV,EAAArD,EAAAsD,cAAA,oBACSzE,EAAK+D,IAAIzB,MAElBkC,EAAArD,EAAAsD,cAAA,qBACUzE,EAAK+D,IAAIH,OAEnBY,EAAArD,EAAAsD,cAAA,yBACczE,EAAK+D,IAAIP,UAI3BgB,EAAArD,EAAAsD,cAAA,OAAKO,MAAO,CAAEE,YAAa,QAA3B,OACEV,EAAArD,EAAAsD,cAAA,OAAKO,MAAO,CAAEE,YAAa,QACzBV,EAAArD,EAAAsD,cAAA,oBACSzE,EAAKiE,IAAI3B,MAElBkC,EAAArD,EAAAsD,cAAA,qBACUzE,EAAKiE,IAAIL,OAEnBY,EAAArD,EAAAsD,cAAA,yBACczE,EAAKiE,IAAIT,gBAS7B,KAxDZlE,OAAOC,SAAS4F,QAAQ,2EAAA9E,OClIb,oCDkIa,UAAAA,OAEZ+E,mBAAmB,sCAFP,iBAAA/E,OAGL+E,mBAAmB,0BAHd,cAGqD,CACzEC,YAAa,YAEV,aApIKC,IAAMC,YEQJC,QACW,cAA7BlG,OAAOC,SAASkG,UAEe,UAA7BnG,OAAOC,SAASkG,UAEhBnG,OAAOC,SAASkG,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAArD,EAAAsD,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5F,KAAK,SAAA6F,GACjCA,EAAaC","file":"static/js/main.f39032d6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport client_id from './config';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: '',\n      playlists: [],\n      auth: '',\n      dupes: [],\n      selected: ''\n    };\n  }\n\n  componentDidMount() {\n    if (window.location.hash) {\n      const hashMap = {\n        access_token: '',\n        token_type: '',\n        expires_in: '',\n        state: ''\n      };\n      window.location.hash.substring(1).split('&').forEach(item => {\n        const i = item.split('=');\n        hashMap[i[0]] = i[1];\n      });\n      fetch('https://api.spotify.com/v1/me/playlists', {\n        headers: {\n          'Authorization': `${hashMap['token_type']} ${hashMap['access_token']}`\n        }\n      })\n        .then((res => res.json()))\n        .then(res => {\n          const firstIndex = res['href'].indexOf('https://api.spotify.com/v1/users/') + 'https://api.spotify.com/v1/users/'.length;\n          const lastIndex = res['href'].lastIndexOf('/');\n          this.setState({\n            user: res['href'].substring(firstIndex, firstIndex + (lastIndex - firstIndex)),\n            playlists: res['items'],\n            auth: `${hashMap['token_type']} ${hashMap['access_token']}`\n          });\n        })\n    }\n  }\n\n  async handleClick(item) {\n    this.setState({ dupes: [] });\n    await fetch(item.href, {\n      headers: {\n        'Authorization': this.state.auth\n      }\n    })\n      .then(async res => res.json())\n      .then(async response => {\n        this.setState({ selected: response.name });\n        const items = response.tracks.items;\n        const tracks = new Map();\n        const dupes = [];\n        this.checkForDuplicateItems(items, tracks, dupes);\n        console.log(tracks);\n        console.log(dupes);\n        let next = response.tracks.next;\n        while (next !== null) {\n          const res = await fetch(next, {\n            headers: { 'Authorization': this.state.auth }\n          }).then(res => res.json());\n          console.log(res);\n          if (res && res.items) {\n            console.log('in response');\n            this.checkForDuplicateItems(res.items, tracks, dupes);\n          }\n          console.log(res);\n          next = res.next;\n        }\n        if (dupes.length > 0) {\n          this.setState({ dupes });\n        }\n      });\n  }\n\n  checkForDuplicateItems(items, tracks, dupes) {\n    for (const item of items) {\n      const track = item.track;\n      const name = track.name;\n      const artist = track.artists.length === 1 ? track.artists[0].name : this.findArtistName(track.artists);\n      const indexName = `${name} by ${artist}`;\n      const album = track.album.name;\n      if (!tracks.has(indexName)) {\n        tracks.set(indexName, {\n          album,\n          name,\n          artist\n        });\n      } else {\n        dupes.push({\n          old: {\n            indexName,\n            name: tracks.get(indexName) ? tracks.get(indexName).name : tracks.get(indexName),\n            artist: tracks.get(indexName) ? tracks.get(indexName).artist : tracks.get(indexName),\n            album: tracks.get(indexName) ? tracks.get(indexName).album : tracks.get(indexName)\n          },\n          new: {\n            indexName,\n            name,\n            album,\n            artist,\n          }\n        });\n      }\n    }\n  }\n\n  findArtistName(artistArray) {\n    let result = '';\n    for (let i = 0; i < artistArray.length; i++) {\n      result += artistArray[i].name;\n      if (i + 1 < artistArray.length) {\n        if (i + 2 < artistArray.length) {\n          result += ', ';\n        } else {\n          result += ' and ';\n        }\n      }\n    }\n    return result;\n  }\n\n  render() {\n    if (!window.location.hash) {\n      window.location.replace(`https://accounts.spotify.com/authorize` +\n        `?response_type=token&client_id=${client_id}` +\n        `&scope=${encodeURIComponent('user-read-private user-read-email')}` +\n        `&redirect_uri=${encodeURIComponent('http://localhost:3000/')}&state=123`, {\n          credentials: 'include'\n        });\n      return null;\n    }\n    return <div>\n      {this.state.user}\n      <ul>\n        {this.state.playlists.map((item, index) => <li key={'playlist name ' + item.name} onClick={() => this.handleClick(item)}>{item.name}</li>)}\n      </ul>\n      <hr />\n      {this.state.selected ?\n        <span>\n          <h3>Dupliates for {this.state.selected}</h3>\n          {this.state.dupes.length === 0 ? 'None' :\n            <div>\n              {this.state.dupes.map((item) => {\n                const name = item.old.indexName.split(' by ');\n                const ulName = <span><i>{name[0]}</i> by <strong>{name[1]}</strong></span>\n                return <span key={item.old.indexName}>\n                  <span>{ulName}</span>\n                  <div style={{ paddingBottom: '2em' }}>\n                    <div style={{ paddingLeft: '2em' }}>Old:\n                      <div style={{ paddingLeft: '2em' }}>\n                        <div>\n                          Name: {item.old.name}\n                        </div>\n                        <div>\n                          Album: {item.old.album}\n                        </div>\n                        <div>\n                          Artist(s): {item.old.artist}\n                        </div>\n                      </div>\n                    </div>\n                    <div style={{ paddingLeft: '2em' }}>New:\n                      <div style={{ paddingLeft: '2em' }}>\n                        <div>\n                          Name: {item.new.name}\n                        </div>\n                        <div>\n                          Album: {item.new.album}\n                        </div>\n                        <div>\n                          Artist(s): {item.new.artist}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </span>\n              })\n              }\n            </div>}\n        </span> : ''}\n\n    </div>;\n  }\n}\n\nexport default App;\n","const clientid = '0a85ee7f3e4a4855bf688d8191a1edf9';\r\n\r\nexport default clientid;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}